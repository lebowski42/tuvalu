#########################
# General information ###
#########################
# If you set an option, after it (!) you can use this option as variable, using $<optionname>.
# e. g. you set the option    foo =  bar , you can use it like
# 							  foobar = <myPath>/$foo


# log-file. (Default: linux: /var/log/tuvalu.log , windows: %PROGRAMFILES%/tuvalu/tuvalu.log
	log_file = 

# log_size: max. size of the log_file (in bytes). (Default: 500000)
log_size = 600000

# path_to_tuvalu. Can be an UNC-Path. (Default: linux /mnt/tuvalu , windows: \\install\tuvalu)
	# for linux clients
	path_to_tuvalu_linux = /mnt/

	# for windows clients
	path_to_tuvalu_win =

# alternate hostname, if empty, will be set automatic.
hostname =  


# path to scripts (server side). (Default: linux: $path_to_tuvalu_linux/scripts , windows: linux: $path_to_tuvalu_win/scripts)
path_to_scripts = 


# path_to_lib: Where the configurationfiles for the hosts are (hosts.win, hosts.linux, groupfiles, disable.win). (Default: linux: $path_to_tuvalu_linux/lib , windows: linux: $path_to_tuvalu_win/lib)
path_to_conf = 


# path_to_bin: Where the scripts/bin are (tuvalu.pl, todo.pl,, ...). (Default: linux: $path_to_tuvalu_linux/tbin , windows: $path_to_tuvalu_win/tbin)
path_to_bin = 




# path to local scripts (client side). (Default: linux: /var/lib/tuvalu , windows: %PROGRAMFILES%/tuvalu/)
path_to_local_tuvalu = 


# On each client there is a file containing the versionsnumbers of the installed scripts. 
# Normally the filename is 'this.installed'. If you use 'path_to_local_tuvalu' to set a location 
# for this files to a shared folder, it maybe useful to have filenames containing the hostnames. # If you set hostname_in_filename=1 the mentioned file ist named hostname.installed
# If you clone systems, it you should use hostname_in_filename=0
# (default 0 (means no))

hostname_in_filename = 

#############
# Commmands #
#############

# early_command will be run, directly after config-file is read (Default: <nothing>).
early_command = 

# tuvalu.pl carry on, if exit code of early command matches early_command_exit_status  (Default: 0)
early_command_exit_status = 




# middle_command will be run, directly after checked, if client is disabled (Default: <nothing>).
middle_command =
# tuvalu.pl carry on, if exit code of middle command matches middle_command_exit_status  (Default: 0)
middle_command_exit_status =  




# late_command will be run, directly before tuvalu exits (after the todo.pl finished) (Default: <nothing>).
late_command = 

# tuvalu.pl carry on, if exit code of late command matches late_command_exit_status  (Default: 0)
late_command_exit_status = 




###########
# todo.pl #
###########

# allocate the todo.pl script what to do if an error occurs. Possible values are (Default: abort):
#  - abort
#  - ignore			 ignores the command, an executes the next one, but marks the corresponding script/cmd as installed (add version to client)
#  - skip			 skips the command and does not mark the corresponding cmd/script as installed (skips also all subscripts, e. g. you call todo.pl itself in a script)
#  - retry			 allocates todo.pl to run the cmd/script again. You can specify the number of retries with error_retries. If all retries fail, todo.pl aborts.
#	  - retry&skip   same as retry, but if all retries fail, cmd/script will be handled as if error_handle = skip 
#	  - retry&ignore same as retry, but if all retries fail, cmd/script will be handled as if error_handle = ignore 
#	  - retry&abort  same as retry (aborting after all retries fail).

error_handle = 

# specified the the number of retries shall be done, if choose error_handle = retry... above (Default: 1).

error_retries = 

